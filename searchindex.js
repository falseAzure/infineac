Search.setIndex({"docnames": ["_autosummary/infineac", "_autosummary/infineac.compare_results", "_autosummary/infineac.compare_results.aggregate_results", "_autosummary/infineac.compare_results.calculate_similarity", "_autosummary/infineac.compare_results.create_compare_df", "_autosummary/infineac.compare_results.create_empty_count_df", "_autosummary/infineac.compare_results.get_strategy_list", "_autosummary/infineac.compare_results.update_count", "_autosummary/infineac.constants", "_autosummary/infineac.file_loader", "_autosummary/infineac.file_loader.add_info_to_event", "_autosummary/infineac.file_loader.create_blank_event", "_autosummary/infineac.file_loader.extract_info_from_earnings_call_body", "_autosummary/infineac.file_loader.extract_info_from_earnings_call_part", "_autosummary/infineac.file_loader.extract_info_from_earnings_call_structured", "_autosummary/infineac.file_loader.get_participants_position", "_autosummary/infineac.file_loader.load_files_from_xml", "_autosummary/infineac.file_loader.participants_list_collapsed", "_autosummary/infineac.file_loader.participants_string_to_list", "_autosummary/infineac.file_loader.structure_earnings_call", "_autosummary/infineac.file_loader.transform_unlisted_participants", "_autosummary/infineac.helper", "_autosummary/infineac.helper.add_context_integers", "_autosummary/infineac.helper.fill_list", "_autosummary/infineac.helper.fill_list_from_mapping", "_autosummary/infineac.helper.jaccard_similarity", "_autosummary/infineac.helper.jaccard_similarity_lists", "_autosummary/infineac.helper.jaccard_similarity_pairwise", "_autosummary/infineac.helper.load_data", "_autosummary/infineac.helper.save_data", "_autosummary/infineac.pipeline", "_autosummary/infineac.pipeline.pipeline", "_autosummary/infineac.process_event", "_autosummary/infineac.process_event.check_if_keyword_align_qa", "_autosummary/infineac.process_event.check_keywords_in_event", "_autosummary/infineac.process_event.corpus_list_to_dataframe", "_autosummary/infineac.process_event.create_participants_to_remove", "_autosummary/infineac.process_event.create_samples", "_autosummary/infineac.process_event.events_to_corpus", "_autosummary/infineac.process_event.excluded_sentences_by_mod_words", "_autosummary/infineac.process_event.extract_infos_from_events", "_autosummary/infineac.process_event.extract_passages_from_event", "_autosummary/infineac.process_event.extract_passages_from_events", "_autosummary/infineac.process_event.extract_passages_from_presentation", "_autosummary/infineac.process_event.extract_passages_from_qa", "_autosummary/infineac.process_event.filter_events", "_autosummary/infineac.process_event.test_positions", "_autosummary/infineac.process_text", "_autosummary/infineac.process_text.combine_adjacent_sentences", "_autosummary/infineac.process_text.contains_stopword", "_autosummary/infineac.process_text.extract_keyword_sentences_preceding_mod", "_autosummary/infineac.process_text.extract_keyword_sentences_preceding_mod_nlp", "_autosummary/infineac.process_text.extract_keyword_sentences_window", "_autosummary/infineac.process_text.extract_passages_from_paragraphs", "_autosummary/infineac.process_text.get_elections", "_autosummary/infineac.process_text.get_russia_and_sanction", "_autosummary/infineac.process_text.get_strategies", "_autosummary/infineac.process_text.keyword_threshold_search_exclude_mod", "_autosummary/infineac.process_text.keyword_threshold_search_include_mod", "_autosummary/infineac.process_text.list_to_string", "_autosummary/infineac.process_text.process_corpus", "_autosummary/infineac.process_text.process_text", "_autosummary/infineac.process_text.process_text_nlp", "_autosummary/infineac.process_text.remove_sentences_under_threshold", "_autosummary/infineac.process_text.sample_strategies", "_autosummary/infineac.process_text.starts_with_additional_word", "_autosummary/infineac.process_text.strategy_keywords_tolist", "_autosummary/infineac.topic_extractor", "_autosummary/infineac.topic_extractor.bert_advanced", "_autosummary/infineac.topic_extractor.categorize_topics", "_autosummary/infineac.topic_extractor.get_groups_from_hierarchy", "_autosummary/infineac.topic_extractor.get_topics_per_company", "_autosummary/infineac.topic_extractor.map_topics_to_categories", "_autosummary/infineac.topic_extractor.plot_category_distribution", "detailed_description", "index", "modules", "user_guide"], "filenames": ["_autosummary/infineac.rst", "_autosummary/infineac.compare_results.rst", "_autosummary/infineac.compare_results.aggregate_results.rst", "_autosummary/infineac.compare_results.calculate_similarity.rst", "_autosummary/infineac.compare_results.create_compare_df.rst", "_autosummary/infineac.compare_results.create_empty_count_df.rst", "_autosummary/infineac.compare_results.get_strategy_list.rst", "_autosummary/infineac.compare_results.update_count.rst", "_autosummary/infineac.constants.rst", "_autosummary/infineac.file_loader.rst", "_autosummary/infineac.file_loader.add_info_to_event.rst", "_autosummary/infineac.file_loader.create_blank_event.rst", "_autosummary/infineac.file_loader.extract_info_from_earnings_call_body.rst", "_autosummary/infineac.file_loader.extract_info_from_earnings_call_part.rst", "_autosummary/infineac.file_loader.extract_info_from_earnings_call_structured.rst", "_autosummary/infineac.file_loader.get_participants_position.rst", "_autosummary/infineac.file_loader.load_files_from_xml.rst", "_autosummary/infineac.file_loader.participants_list_collapsed.rst", "_autosummary/infineac.file_loader.participants_string_to_list.rst", "_autosummary/infineac.file_loader.structure_earnings_call.rst", "_autosummary/infineac.file_loader.transform_unlisted_participants.rst", "_autosummary/infineac.helper.rst", "_autosummary/infineac.helper.add_context_integers.rst", "_autosummary/infineac.helper.fill_list.rst", "_autosummary/infineac.helper.fill_list_from_mapping.rst", "_autosummary/infineac.helper.jaccard_similarity.rst", "_autosummary/infineac.helper.jaccard_similarity_lists.rst", "_autosummary/infineac.helper.jaccard_similarity_pairwise.rst", "_autosummary/infineac.helper.load_data.rst", "_autosummary/infineac.helper.save_data.rst", "_autosummary/infineac.pipeline.rst", "_autosummary/infineac.pipeline.pipeline.rst", "_autosummary/infineac.process_event.rst", "_autosummary/infineac.process_event.check_if_keyword_align_qa.rst", "_autosummary/infineac.process_event.check_keywords_in_event.rst", "_autosummary/infineac.process_event.corpus_list_to_dataframe.rst", "_autosummary/infineac.process_event.create_participants_to_remove.rst", "_autosummary/infineac.process_event.create_samples.rst", "_autosummary/infineac.process_event.events_to_corpus.rst", "_autosummary/infineac.process_event.excluded_sentences_by_mod_words.rst", "_autosummary/infineac.process_event.extract_infos_from_events.rst", "_autosummary/infineac.process_event.extract_passages_from_event.rst", "_autosummary/infineac.process_event.extract_passages_from_events.rst", "_autosummary/infineac.process_event.extract_passages_from_presentation.rst", "_autosummary/infineac.process_event.extract_passages_from_qa.rst", "_autosummary/infineac.process_event.filter_events.rst", "_autosummary/infineac.process_event.test_positions.rst", "_autosummary/infineac.process_text.rst", "_autosummary/infineac.process_text.combine_adjacent_sentences.rst", "_autosummary/infineac.process_text.contains_stopword.rst", "_autosummary/infineac.process_text.extract_keyword_sentences_preceding_mod.rst", "_autosummary/infineac.process_text.extract_keyword_sentences_preceding_mod_nlp.rst", "_autosummary/infineac.process_text.extract_keyword_sentences_window.rst", "_autosummary/infineac.process_text.extract_passages_from_paragraphs.rst", "_autosummary/infineac.process_text.get_elections.rst", "_autosummary/infineac.process_text.get_russia_and_sanction.rst", "_autosummary/infineac.process_text.get_strategies.rst", "_autosummary/infineac.process_text.keyword_threshold_search_exclude_mod.rst", "_autosummary/infineac.process_text.keyword_threshold_search_include_mod.rst", "_autosummary/infineac.process_text.list_to_string.rst", "_autosummary/infineac.process_text.process_corpus.rst", "_autosummary/infineac.process_text.process_text.rst", "_autosummary/infineac.process_text.process_text_nlp.rst", "_autosummary/infineac.process_text.remove_sentences_under_threshold.rst", "_autosummary/infineac.process_text.sample_strategies.rst", "_autosummary/infineac.process_text.starts_with_additional_word.rst", "_autosummary/infineac.process_text.strategy_keywords_tolist.rst", "_autosummary/infineac.topic_extractor.rst", "_autosummary/infineac.topic_extractor.bert_advanced.rst", "_autosummary/infineac.topic_extractor.categorize_topics.rst", "_autosummary/infineac.topic_extractor.get_groups_from_hierarchy.rst", "_autosummary/infineac.topic_extractor.get_topics_per_company.rst", "_autosummary/infineac.topic_extractor.map_topics_to_categories.rst", "_autosummary/infineac.topic_extractor.plot_category_distribution.rst", "detailed_description.rst", "index.rst", "modules.rst", "user_guide.rst"], "titles": ["infineac", "infineac.compare_results", "infineac.compare_results.aggregate_results", "infineac.compare_results.calculate_similarity", "infineac.compare_results.create_compare_df", "infineac.compare_results.create_empty_count_df", "infineac.compare_results.get_strategy_list", "infineac.compare_results.update_count", "infineac.constants", "infineac.file_loader", "infineac.file_loader.add_info_to_event", "infineac.file_loader.create_blank_event", "infineac.file_loader.extract_info_from_earnings_call_body", "infineac.file_loader.extract_info_from_earnings_call_part", "infineac.file_loader.extract_info_from_earnings_call_structured", "infineac.file_loader.get_participants_position", "infineac.file_loader.load_files_from_xml", "infineac.file_loader.participants_list_collapsed", "infineac.file_loader.participants_string_to_list", "infineac.file_loader.structure_earnings_call", "infineac.file_loader.transform_unlisted_participants", "infineac.helper", "infineac.helper.add_context_integers", "infineac.helper.fill_list", "infineac.helper.fill_list_from_mapping", "infineac.helper.jaccard_similarity", "infineac.helper.jaccard_similarity_lists", "infineac.helper.jaccard_similarity_pairwise", "infineac.helper.load_data", "infineac.helper.save_data", "infineac.pipeline", "infineac.pipeline.pipeline", "infineac.process_event", "infineac.process_event.check_if_keyword_align_qa", "infineac.process_event.check_keywords_in_event", "infineac.process_event.corpus_list_to_dataframe", "infineac.process_event.create_participants_to_remove", "infineac.process_event.create_samples", "infineac.process_event.events_to_corpus", "infineac.process_event.excluded_sentences_by_mod_words", "infineac.process_event.extract_infos_from_events", "infineac.process_event.extract_passages_from_event", "infineac.process_event.extract_passages_from_events", "infineac.process_event.extract_passages_from_presentation", "infineac.process_event.extract_passages_from_qa", "infineac.process_event.filter_events", "infineac.process_event.test_positions", "infineac.process_text", "infineac.process_text.combine_adjacent_sentences", "infineac.process_text.contains_stopword", "infineac.process_text.extract_keyword_sentences_preceding_mod", "infineac.process_text.extract_keyword_sentences_preceding_mod_nlp", "infineac.process_text.extract_keyword_sentences_window", "infineac.process_text.extract_passages_from_paragraphs", "infineac.process_text.get_elections", "infineac.process_text.get_russia_and_sanction", "infineac.process_text.get_strategies", "infineac.process_text.keyword_threshold_search_exclude_mod", "infineac.process_text.keyword_threshold_search_include_mod", "infineac.process_text.list_to_string", "infineac.process_text.process_corpus", "infineac.process_text.process_text", "infineac.process_text.process_text_nlp", "infineac.process_text.remove_sentences_under_threshold", "infineac.process_text.sample_strategies", "infineac.process_text.starts_with_additional_word", "infineac.process_text.strategy_keywords_tolist", "infineac.topic_extractor", "infineac.topic_extractor.bert_advanced", "infineac.topic_extractor.categorize_topics", "infineac.topic_extractor.get_groups_from_hierarchy", "infineac.topic_extractor.get_topics_per_company", "infineac.topic_extractor.map_topics_to_categories", "infineac.topic_extractor.plot_category_distribution", "Detailed Description", "InFineac", "API Reference", "User Guide"], "terms": {"extract": [0, 9, 12, 13, 14, 16, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 47, 50, 51, 52, 53, 58, 67, 68, 74, 75], "financi": [0, 74, 75, 77], "insight": [0, 74, 75, 77], "from": [0, 5, 8, 9, 12, 13, 14, 16, 23, 30, 31, 38, 40, 41, 42, 43, 47, 50, 52, 59, 60, 61, 62, 63, 64, 67, 68, 70, 72, 74, 75, 77], "earn": [0, 9, 12, 13, 14, 16, 19, 30, 31, 32, 47, 75, 77], "call": [0, 9, 12, 13, 14, 15, 16, 19, 20, 27, 30, 31, 32, 34, 38, 39, 42, 47, 50, 51, 75, 77], "us": [0, 4, 8, 10, 15, 20, 31, 32, 38, 41, 42, 43, 44, 47, 50, 51, 52, 53, 58, 59, 67, 68, 74, 75, 77], "nlp": [0, 31, 32, 38, 41, 42, 43, 44, 47, 50, 52, 53, 60, 61, 67, 74, 75, 77], "i": [0, 3, 9, 12, 13, 16, 19, 31, 32, 38, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 57, 59, 60, 61, 62, 68, 69, 74, 75, 77], "python": [0, 74, 75, 77], "packag": [0, 8, 21, 32, 74, 77], "ar": [0, 2, 3, 4, 8, 9, 11, 12, 13, 14, 19, 20, 22, 31, 34, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 58, 60, 61, 62, 69, 71, 72, 74, 75, 77], "rich": [0, 75, 77], "sourc": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77], "inform": [0, 9, 10, 12, 13, 14, 16, 19, 32, 74, 75, 77], "investor": [0, 74, 75, 77], "held": [0, 74, 75, 77], "quarterli": [0, 74, 75, 77], "publicli": [0, 74, 75, 77], "trade": [0, 74, 75, 77], "compani": [0, 4, 16, 31, 32, 40, 71, 74, 75, 77], "It": [0, 2, 47], "spaci": [0, 31, 38, 41, 42, 43, 44, 50, 51, 52, 53, 60, 61, 62, 75, 77], "bertop": [0, 67, 68, 75, 77], "librari": [0, 75, 77], "modul": [0, 1, 9, 21, 32, 38, 47, 75], "compar": 1, "result": [1, 2, 31, 56, 74, 77], "differ": 1, "model": [1, 31, 38, 41, 42, 43, 44, 50, 52, 53, 60, 61, 68], "creat": [1, 5, 11, 36, 37, 75], "pipelin": [1, 77], "topic_extractor": [1, 77], "function": [1, 9, 12, 21, 30, 32, 33, 34, 38, 41, 42, 47, 50, 51, 67, 77], "df": [2, 3, 4, 27, 37, 71, 73], "datafram": [2, 3, 4, 5, 7, 27, 31, 35, 38, 40, 56, 64, 69, 70, 71, 72, 73], "category_nam": 2, "list": [2, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74], "str": [2, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 72, 73], "intersect": [2, 3, 5], "union": [2, 3, 5], "aggreg": [2, 31, 73, 77], "given": [2, 3, 4, 5, 6, 7, 10, 13, 27, 30, 31, 38, 45, 46, 73], "return": [2, 3, 6, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 27, 31, 33, 38, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 68, 69, 70, 71, 73], "count": [2, 7], "combin": [2, 3, 7], "categori": [2, 3, 4, 5, 7, 8, 69, 71, 72, 73], "strategi": [2, 5, 6, 7, 8, 31, 38, 56, 60, 64, 71, 73, 74], "thu": [2, 27], "number": [2, 3, 4, 13, 31, 33, 38, 41, 42, 43, 44, 45, 52, 53, 57, 68], "time": [2, 33, 74], "appear": [2, 13], "togeth": 2, "The": [2, 3, 4, 8, 9, 12, 13, 14, 15, 19, 20, 27, 31, 38, 41, 42, 43, 44, 47, 50, 51, 52, 53, 57, 58, 60, 61, 62, 71, 72, 74, 77], "calcul": [3, 25, 26, 27], "all": [3, 4, 22, 31, 38, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 74, 77], "topic": [3, 4, 8, 30, 31, 67, 68, 69, 70, 71, 72, 74, 75], "base": [3, 8, 10, 15, 45, 48], "thi": [3, 12, 13, 14, 21, 38, 41, 42, 43, 44, 52, 53, 74, 77], "similar": [3, 25, 26, 27], "within": [3, 13, 52, 74], "must": [3, 4, 8, 31, 38, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58, 61, 62], "contain": [3, 4, 8, 10, 11, 12, 13, 14, 16, 21, 22, 30, 31, 32, 36, 38, 41, 42, 43, 44, 45, 47, 49, 53, 54, 55, 57, 58, 63, 68, 69, 71, 72, 73, 74, 77], "least": 3, "two": [3, 25, 26, 31, 74], "column": [3, 4, 5, 7, 27, 73], "These": [3, 60, 61, 62, 74], "infer": 3, "prefix": 3, "name": [3, 4, 8, 12, 13, 14, 15, 16, 20, 27, 31, 32, 36, 38, 40, 60, 71, 74, 77], "paramet": [3, 10, 12, 13, 14, 15, 16, 19, 20, 22, 31, 33, 38, 41, 42, 43, 44, 45, 53, 57, 58, 60, 61, 62, 68, 69, 71, 73], "pl": [3, 38, 69, 71, 72, 73], "input": 3, "measur": 3, "type": [3, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 31, 32, 33, 38, 41, 42, 43, 44, 45, 52, 53, 57, 58, 60, 61, 62, 68, 69, 71, 73], "rais": [3, 22, 52, 53], "valueerror": [3, 22, 52, 53], "If": [3, 19, 22, 31, 38, 41, 42, 43, 44, 45, 52, 53, 57, 60, 61, 62, 68], "found": [3, 11, 31, 38, 41, 42, 43, 44, 52, 53], "equal": [3, 4, 77], "onli": [3, 15, 20, 22, 31, 38, 41, 42, 43, 44, 52, 53, 63], "one": [3, 31, 38, 41, 42, 43, 44, 50, 51, 52, 53, 57, 58], "note": [3, 9, 32, 47], "jaccard": [3, 25, 26, 27], "index": [3, 75], "length": [3, 26, 27, 31, 38, 41, 42, 43, 44, 52, 53], "divid": [3, 74], "1": [3, 22, 31, 32, 38, 41, 42, 43, 44, 47, 52, 53, 63, 67, 71, 72], "j": [3, 77], "A": [3, 11, 12, 13, 14, 16, 19, 32, 33, 34, 44, 74, 77], "b": 3, "frac": 3, "cap": 3, "cup": 3, "normal": 3, "pairwis": [3, 27], "e": [3, 16, 19, 31, 32, 38, 41, 42, 43, 44, 47, 52, 53, 77], "each": [3, 6, 8, 12, 13, 14, 16, 19, 22, 31, 56, 60, 69, 74], "pair": [3, 12, 13, 14, 16, 19, 32], "But": 3, "here": 3, "wai": 3, "mean": [3, 27], "taken": 3, "refer": [3, 75], "http": 3, "en": [3, 9, 32, 47, 67], "wikipedia": 3, "org": 3, "wiki": 3, "jaccard_index": 3, "suffix": 4, "join": [4, 31, 38, 41, 42, 43, 44, 48, 52, 53, 77], "year": [4, 8, 16, 31, 32, 40, 45, 71, 74, 77], "renam": 4, "company_nam": [4, 16, 32], "column_nam": 5, "an": [5, 10, 13, 14, 20, 27, 31, 32, 33, 34, 36, 38, 41, 42, 43, 44, 52, 53, 60, 61, 65, 74], "empti": [5, 19, 71, 72], "cartesian": 5, "product": 5, "well": [5, 50, 51, 52, 53, 60, 61, 62, 63, 69, 71, 74], "dictionari": [6, 9, 10, 11, 12, 13, 14, 16, 19, 31, 32, 38, 41, 42, 43, 44, 45, 52, 53, 57, 66, 69], "dict": [6, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 29, 31, 32, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 52, 53, 56, 57, 66], "row": 6, "updat": [7, 16, 32], "base_year": [8, 31, 45], "filter": [8, 31, 45, 50, 51, 58, 77], "event": [8, 9, 10, 11, 16, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 67, 74, 77], "int": [8, 13, 15, 16, 20, 22, 23, 24, 25, 26, 31, 32, 33, 34, 38, 41, 42, 43, 44, 45, 48, 52, 53, 57, 63, 68, 70, 72], "additional_stopword": 8, "addit": [8, 31, 38, 60, 61, 62, 77], "stopword": [8, 31, 38, 49, 60, 61, 62, 77], "remov": [8, 31, 36, 38, 60, 61, 62, 63, 77], "text": [8, 13, 32, 35, 36, 38, 45, 47, 50, 51, 52, 57, 58, 60, 61, 74, 77], "data": [8, 9, 28, 29, 32, 47, 67, 75], "modifier_word": [8, 31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 56, 57, 58], "modifi": [8, 39, 57, 58], "word": [8, 31, 39, 49, 54, 55, 57, 58, 60, 61, 62, 63, 65, 77], "preced": [8, 31, 38, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58, 77], "keyword": [8, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 57, 58, 66, 67, 69, 77], "modifier_words_strategi": 8, "strategy_keyword": [8, 56, 66], "search": [8, 31, 38, 41, 42, 43, 44, 50, 51, 52, 53, 56, 57, 58, 75], "kei": [8, 11, 12, 13, 14, 15, 16, 19, 20, 31, 32, 38, 41, 42, 43, 44, 45, 52, 53, 57, 74], "valu": [8, 12, 13, 14, 16, 19, 24, 32, 45, 57], "super": 8, "import": [9, 32, 41, 42, 43, 44, 47, 67, 77], "structur": [9, 14, 19, 75], "xml": [9, 10, 16, 32, 47, 67, 74, 77], "file": [9, 10, 16, 28, 30, 31, 32, 47, 67, 74, 75], "exampl": [9, 22, 32, 47, 67], "spacy_stanza": [9, 32, 47, 67], "nlp_stanza": [9, 47], "load_pipelin": [9, 32, 47, 67], "processor": [9, 32, 47, 67], "token": [9, 32, 47, 59, 60, 61, 62, 67], "lemma": [9, 32, 47, 67], "add_pip": [9, 32, 47, 67], "sentenc": [9, 31, 32, 35, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 58, 63, 67, 77], "path_dir": [9, 32, 47, 67], "transcript": [9, 13, 16, 19, 30, 31, 32, 47, 67, 74, 77], "path": [9, 28, 29, 31, 32, 47, 67, 77], "rglob": [9, 32, 47, 67], "load_files_from_xml": [9, 10, 11, 32, 47, 67], "store": 9, "main": 9, "load": [9, 28, 75], "relev": [9, 74, 77], "element": [10, 22, 31, 38, 41, 42, 43, 44, 52, 53], "add": [10, 22], "which": [10, 31, 38, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58, 74, 77], "should": [10, 31, 38, 60, 61, 62], "ad": [10, 20, 22], "lxml": 10, "etre": 10, "blank": 11, "expect": 11, "final": [11, 16, 32], "output": 11, "can": [11, 13, 20, 28, 31, 38, 41, 42, 43, 44, 52, 53, 56, 60, 61, 62, 77], "document": [11, 31, 38, 51, 60, 61, 62, 67, 68, 77], "bodi": [12, 19], "confer": [12, 13, 14, 15, 16, 19, 20, 32, 74], "includ": [12, 14, 31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58, 71, 77], "corpor": [12, 13, 14, 15, 16, 19, 20, 32, 74], "particip": [12, 13, 14, 15, 16, 17, 18, 19, 20, 31, 32, 36, 38, 74], "posit": [12, 13, 14, 15, 22, 35, 38, 46, 63, 74], "present": [12, 13, 14, 16, 19, 31, 32, 34, 35, 38, 41, 42, 43, 74, 77], "part": [12, 13, 14, 16, 19, 32, 34, 35, 38, 41, 42, 43, 44, 60, 61, 62, 74], "q": [12, 13, 14, 16, 32, 33, 34, 44, 74, 77], "wrapper": [12, 38, 41, 42], "structure_earnings_cal": [12, 14], "extract_info_from_earnings_call_structur": 12, "string": [12, 13, 14, 17, 18, 19, 32, 41, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 59], "corp_particip": [12, 13, 14, 15, 16, 19, 20, 32], "consist": [12, 14], "corp_participants_collaps": [12, 14, 16, 32], "As": [12, 14, 20], "abov": [12, 14, 53], "collaps": [12, 14, 16, 17, 32], "singl": [12, 14, 74], "conf_particip": [12, 13, 14, 15, 16, 19, 20, 32], "same": [12, 14, 26, 27, 31, 38, 41, 42, 43, 44, 52, 53], "format": [12, 14], "conf_participants_collaps": [12, 14, 16, 32], "extract_info_from_earnings_call_part": [12, 14], "qa": [12, 13, 14, 16, 19, 31, 32, 33, 35, 38, 41, 42, 44], "either": [13, 20, 31, 38, 41, 42, 43, 44, 52, 53], "": [13, 74, 77], "oper": [13, 20, 74], "editor": [13, 20], "moder": [13, 20, 74], "unknown": [13, 20], "where": [13, 53, 74], "hold": [13, 19, 56, 66], "individu": [13, 41, 42, 43, 44, 52, 53, 61, 62], "correspond": [13, 19, 24, 27, 31, 32, 38, 41, 42, 43, 44, 60, 69, 72, 74], "default": [13, 22, 31, 38, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58, 60, 61, 62, 68, 73], "n": [13, 22, 70, 77], "conference_call_structured_dict": 14, "alreadi": [14, 22], "transform": [15, 20, 63], "pars": 16, "For": [16, 32], "follow": [16, 19, 32, 41, 42, 74, 77], "year_upload": [16, 32], "integ": [16, 22, 23, 31, 32, 38, 41, 42, 43, 44, 52, 53], "upload": [16, 32], "presentation_collaps": [16, 32], "qa_collaps": [16, 32], "action": [16, 32], "g": [16, 19, 31, 32, 38, 41, 42, 43, 44, 47, 52, 53], "publish": [16, 32], "story_typ": [16, 32], "stori": [16, 32], "version": [16, 32, 77], "public": [16, 32, 74], "titl": [16, 32, 74], "citi": [16, 32, 74], "company_tick": [16, 32], "ticker": [16, 32, 74], "date": [16, 32, 40, 74], "id": [16, 32, 40, 74], "last_upd": [16, 32], "last": [16, 32], "event_type_id": [16, 32], "event_type_nam": [16, 32], "participants_list": 17, "split": 18, "separ": [19, 59], "its": 19, "them": [19, 41, 42, 43, 44, 50, 51, 52, 53, 74, 75, 77], "question": [19, 31, 33, 38, 41, 42, 44, 75, 77], "answer": [19, 31, 33, 38, 41, 42, 44, 74, 77], "start": [19, 65], "end": [19, 28], "specif": [19, 47, 50, 51, 52, 74], "surround": [19, 43, 44, 52, 53], "repres": 19, "multipl": 19, "about": [19, 74, 77], "unlist": 20, "identifi": 20, "among": 20, "ones": 20, "some": [20, 74], "speaker": [20, 46, 74], "so": [20, 31, 38, 41, 42, 43, 44, 52, 53, 77], "thei": [20, 22, 74, 77], "gener": [20, 74], "lst": [22, 23, 24, 56], "m": 22, "min_int": 22, "max_int": 22, "method": [22, 23, 28, 31, 38, 41, 42, 43, 44, 47, 52, 53], "subsequ": [22, 31, 38, 41, 42, 43, 44, 53, 77], "prior": [22, 44], "until": 22, "min": [22, 23], "minimum": [22, 45, 57], "max": [22, 23], "maximum": 22, "limit": 22, "extend": 22, "smaller": 22, "than": [22, 31, 77], "neg": 22, "3": [22, 77], "4": 22, "15": [22, 37], "2": [22, 31, 38, 41, 42, 43, 44, 52, 53, 71, 72], "5": 22, "14": 22, "16": 22, "6": 22, "17": 22, "0": [22, 31, 38, 41, 42, 43, 44, 52, 53], "12": 22, "13": 22, "7": 22, "8": 22, "9": 22, "10": [22, 64, 70, 77], "11": 22, "18": 22, "fill": [23, 24], "ani": [24, 31, 68, 74], "map": [24, 69, 71, 72], "none": [24, 31, 38, 43, 56, 68], "accord": [24, 38, 60, 61, 62, 69], "list1": [25, 26], "list2": [25, 26], "float": [25, 26], "between": [25, 26, 27], "both": [26, 74], "need": [26, 77], "have": 26, "arrai": 27, "polar": [27, 31, 35, 38], "np": 27, "ha": [27, 74], "jaccard_similarity_list": 27, "lzma": 28, "lz4": [28, 29, 77], "pickl": [28, 77], "entir": [30, 31, 38, 41, 42, 43, 44, 52, 53, 74, 77], "preload_ev": [31, 77], "bool": [31, 34, 38, 41, 42, 43, 44, 49, 52, 53, 56, 57, 58, 60, 61, 62, 65, 68], "fals": [31, 38, 41, 42, 44, 57, 58, 60, 61, 62], "preload_corpu": 31, "nlp_model": [31, 32, 38, 39, 41, 42, 43, 44, 47, 50, 52, 53, 60, 61, 67], "2019": [31, 45], "disregard": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58], "except": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58], "exclud": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58], "ignor": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58], "leav": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 56, 57, 58, 66], "out": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 56, 57, 58, 66], "omit": [31, 34, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 57, 58], "section": [31, 33, 38, 41, 42, 43, 44, 77], "context_window_sent": [31, 38, 41, 42, 43, 44, 52, 53], "join_adjacent_sent": [31, 38, 41, 42, 43, 44, 52, 53], "true": [31, 38, 41, 42, 43, 44, 49, 52, 53, 57, 58, 60, 61, 62, 68], "subsequent_paragraph": [31, 38, 41, 42, 43, 44, 53], "extract_answ": [31, 38, 41, 42, 44], "lemmat": [31, 38, 60, 61, 62], "lowercas": [31, 38, 60, 61, 62], "remove_stopword": [31, 38, 60, 61, 62], "remove_punctu": [31, 38, 60, 61, 62], "remove_numer": [31, 38, 60, 61, 62], "remove_curr": [31, 38, 60, 61, 62], "remove_spac": [31, 38, 60, 61, 62], "remove_keyword": [31, 38, 77], "remove_nam": [31, 38, 77], "remove_strategi": [31, 38, 77], "remove_additional_stopword": [31, 38], "representation_model": [31, 68], "embedding_model": [31, 68], "umap_model": [31, 68], "vectorizer_model": [31, 68], "nr_topic": [31, 68], "predefined_top": [31, 68], "threshold": [31, 63, 77], "directori": [31, 77], "corpu": [31, 35, 38, 60, 63, 67, 75], "passag": [31, 38, 41, 42, 43, 44, 47, 50, 51, 52, 53, 77], "lang": [31, 38, 41, 42, 43, 44, 50, 52, 53, 60, 61], "constant": [31, 45, 68, 69, 77], "tupl": [31, 38, 41, 42, 43, 44, 52, 53, 68], "context": [31, 38, 41, 42, 43, 44, 52, 53, 77], "window": [31, 38, 41, 42, 43, 44, 52, 53, 77], "first": [31, 38, 41, 42, 43, 44, 52, 53, 77], "indic": [31, 35, 38, 41, 42, 43, 44, 52, 53, 63, 74], "befor": [31, 38, 41, 42, 43, 44, 45, 52, 53, 77], "wa": [31, 38, 41, 42, 43, 44, 52, 53, 74], "second": [31, 38, 41, 42, 43, 44, 52, 53], "after": [31, 38, 41, 42, 43, 44, 52, 53, 74], "provid": [31, 38, 41, 42, 43, 44, 52, 53, 74], "paragraph": [31, 35, 38, 41, 42, 43, 44, 52, 53, 77], "whether": [31, 38, 41, 42, 43, 44, 52, 53, 68, 77], "adjac": [31, 38, 41, 42, 43, 44, 48, 52, 53, 77], "also": [31, 38, 41, 42, 44], "return_typ": [31, 38, 41, 42, 43, 44, 52, 53], "punctuat": [31, 38, 60, 61, 62], "numer": [31, 38, 60, 61, 62], "currenc": [31, 38, 60, 61, 62], "symbol": [31, 38, 60, 61, 62], "space": [31, 38, 60, 61, 62], "represent": [31, 68], "embed": [31, 68], "umap": [31, 68], "vector": [31, 68], "determin": [31, 43, 44, 68], "automat": [31, 41, 42, 43, 44, 52, 53, 68], "less": [31, 63, 77], "manipul": 32, "process": [32, 36, 38, 47, 51, 60, 61, 62, 77], "process_text": [32, 34, 38, 39, 67, 77], "file_load": [32, 47, 67, 77], "russia": [32, 37, 47, 55, 67], "ukrain": [32, 47, 67, 74], "events_to_corpu": [32, 67], "check": [33, 34, 46, 49, 57, 58, 65], "occur": [33, 43, 44, 53], "NOT": 33, "keyword_search_exclude_threshold": [34, 50, 51, 58], "convert": [35, 38, 59, 66], "nest": [35, 41, 42], "later": 36, "dure": [36, 74], "sampl": [37, 64], "extract_passages_from_ev": [38, 47], "corpus_list_to_datafram": 38, "process_corpu": [38, 59], "origin": [38, 63], "keyword_threshold_search_include_mod": 39, "func": [39, 68], "extract_keyword_sentences_preceding_mod_nlp": 39, "compris": [41, 74], "extract_passages_from_present": [41, 44], "extract_passages_from_qa": [41, 43], "set": [41, 42, 43, 44, 52, 53], "concaten": [41, 43, 44, 52, 53], "hierarchi": [41, 42], "loop": [42, 53], "over": 42, "presenc": [43, 44], "addition": [43, 44, 53, 77], "window_subsequ": [43, 44, 53], "like": [43, 44, 74], "occurr": [45, 57], "valid": 46, "mainli": 47, "process_ev": [47, 50, 51, 67, 77], "sentence_id": 48, "only_start": 49, "obtain": [50, 51, 58], "extract_keyword_sentences_window": [50, 51], "excluded_sentences_by_mod_word": [50, 51], "rtype": [50, 51, 52], "doc": [51, 67, 68, 77], "defin": [52, 53], "neither": 52, "nor": 52, "keyword_n_paragraphs_abov": 53, "through": 53, "current": 53, "evalu": [54, 55], "elect": 54, "presidenti": 54, "accordingli": [54, 55], "sanction": 55, "adapt": [56, 66], "reloc": [56, 66], "exit": [56, 66], "cancel": [56, 66], "discontinu": [56, 66], "divest": [56, 66], "left": [56, 66], "liquid": [56, 66], "pull": [56, 66], "retreat": [56, 66], "suspend": [56, 66], "termin": [56, 66], "withdraw": [56, 66], "stai": [56, 66], "continu": [56, 66], "keep": [56, 66], "maintain": [56, 66], "remain": [56, 66], "wait": [56, 66], "t": [56, 77], "cannot": 56, "don": 56, "boolean": 56, "doe": 57, "otherwis": [57, 58], "back": 59, "remove_additional_words_part": [60, 61, 62], "remove_specific_stopword": 60, "additional_word": [60, 61, 62, 65], "additional_words_whol": [60, 61, 62], "remove_additional_word": [60, 77], "anoth": [60, 61, 62], "remove_additional_words_whol": [61, 62], "additional_words_part": [61, 62], "text_nlp": [61, 62], "whole": [61, 62], "k": [64, 77], "remove_sentences_under_threshold": 67, "processed_text": 67, "tolist": 67, "probabl": [67, 68], "bert_advanc": 67, "_bertop": 68, "numpi": 68, "ndarrai": 68, "keywords_top": 69, "categor": [69, 74, 75, 77], "group": [69, 70], "per": [69, 71, 77], "hierarchical_top": 70, "top": 70, "children": 70, "hierarch": 70, "standard": [71, 72], "three": [71, 74], "category_var": 73, "plot": 73, "distribut": 73, "infineac": [74, 77], "rang": [74, 75, 77], "give": 74, "focu": 74, "respect": 74, "although": 74, "might": 74, "plentitud": 74, "task": [74, 75, 77], "project": [74, 77], "center": 74, "around": 74, "how": 74, "effect": 74, "russian": 74, "invas": 74, "conduct": 74, "sharehold": 74, "analyst": 74, "discuss": 74, "perform": 74, "period": 74, "typic": 74, "usual": 74, "take": 74, "place": 74, "shortli": 74, "releas": 74, "report": 74, "member": 74, "leadership": 74, "ceo": 74, "cfo": 74, "other": 74, "execut": [74, 77], "analysi": 74, "develop": 74, "often": 74, "cover": 74, "revenu": 74, "net": 74, "incom": 74, "expens": 74, "margin": 74, "forward": 74, "look": 74, "guidanc": 74, "plan": 74, "upcom": 74, "quarter": 74, "futur": 74, "prospect": 74, "stem": 74, "refinitiv": 74, "avail": 74, "purchas": 74, "metadata": 74, "uniqu": 74, "technic": 74, "itself": 74, "work": 74, "session": 74, "In": 74, "most": 74, "heavili": [75, 77], "user": 75, "guid": 75, "overview": 75, "instal": 75, "quickstart": 75, "detail": 75, "descript": 75, "research": 75, "api": 75, "page": 75, "new": 77, "conda": 77, "environ": 77, "activ": 77, "Then": 77, "repositori": 77, "flag": 77, "edit": 77, "mode": 77, "you": 77, "make": 77, "chang": 77, "code": 77, "reflect": 77, "pip": 77, "requir": 77, "specifi": 77, "pyproject": 77, "toml": 77, "script": 77, "folder": 77, "load_data": 77, "py": 77, "save": 77, "compress": 77, "load_save_data": 77, "p": 77, "c": 77, "create_corpu": 77, "y": 77, "w": 77, "size": 77, "r": 77, "extract_top": 77, "xlsx": 77, "preloaded_corpu": 77, "docs_sourc": 77, "notebook": 77, "ipynb": 77, "__init__": 77, "helper": 77, "load_save_transcript": 77, "test": 77, "gitignor": 77, "licens": 77, "readm": 77, "rst": 77, "tox": 77, "ini": 77, "gain": 77, "throughout": 77, "our": 77, "necessari": 77, "initi": 77, "preprocess": 77, "unit": 77, "your": 77}, "objects": {"": [[0, 0, 0, "-", "infineac"]], "infineac": [[1, 0, 0, "-", "compare_results"], [8, 0, 0, "-", "constants"], [9, 0, 0, "-", "file_loader"], [21, 0, 0, "-", "helper"], [30, 0, 0, "-", "pipeline"], [32, 0, 0, "-", "process_event"], [47, 0, 0, "-", "process_text"], [67, 0, 0, "-", "topic_extractor"]], "infineac.compare_results": [[2, 1, 1, "", "aggregate_results"], [3, 1, 1, "", "calculate_similarity"], [4, 1, 1, "", "create_compare_df"], [5, 1, 1, "", "create_empty_count_df"], [6, 1, 1, "", "get_strategy_list"], [7, 1, 1, "", "update_count"]], "infineac.constants": [[8, 2, 1, "", "ADDITIONAL_STOPWORDS"], [8, 2, 1, "", "BASE_YEAR"], [8, 2, 1, "", "MODIFIER_WORDS"], [8, 2, 1, "", "MODIFIER_WORDS_STRATEGY"], [8, 2, 1, "", "STRATEGY_KEYWORDS"], [8, 2, 1, "", "TOPICS"]], "infineac.file_loader": [[10, 1, 1, "", "add_info_to_event"], [11, 1, 1, "", "create_blank_event"], [12, 1, 1, "", "extract_info_from_earnings_call_body"], [13, 1, 1, "", "extract_info_from_earnings_call_part"], [14, 1, 1, "", "extract_info_from_earnings_call_structured"], [15, 1, 1, "", "get_participants_position"], [16, 1, 1, "", "load_files_from_xml"], [17, 1, 1, "", "participants_list_collapsed"], [18, 1, 1, "", "participants_string_to_list"], [19, 1, 1, "", "structure_earnings_call"], [20, 1, 1, "", "transform_unlisted_participants"]], "infineac.helper": [[22, 1, 1, "", "add_context_integers"], [23, 1, 1, "", "fill_list"], [24, 1, 1, "", "fill_list_from_mapping"], [25, 1, 1, "", "jaccard_similarity"], [26, 1, 1, "", "jaccard_similarity_lists"], [27, 1, 1, "", "jaccard_similarity_pairwise"], [28, 1, 1, "", "load_data"], [29, 1, 1, "", "save_data"]], "infineac.pipeline": [[31, 1, 1, "", "pipeline"]], "infineac.process_event": [[33, 1, 1, "", "check_if_keyword_align_qa"], [34, 1, 1, "", "check_keywords_in_event"], [35, 1, 1, "", "corpus_list_to_dataframe"], [36, 1, 1, "", "create_participants_to_remove"], [37, 1, 1, "", "create_samples"], [38, 1, 1, "", "events_to_corpus"], [39, 1, 1, "", "excluded_sentences_by_mod_words"], [40, 1, 1, "", "extract_infos_from_events"], [41, 1, 1, "", "extract_passages_from_event"], [42, 1, 1, "", "extract_passages_from_events"], [43, 1, 1, "", "extract_passages_from_presentation"], [44, 1, 1, "", "extract_passages_from_qa"], [45, 1, 1, "", "filter_events"], [46, 1, 1, "", "test_positions"]], "infineac.process_text": [[48, 1, 1, "", "combine_adjacent_sentences"], [49, 1, 1, "", "contains_stopword"], [50, 1, 1, "", "extract_keyword_sentences_preceding_mod"], [51, 1, 1, "", "extract_keyword_sentences_preceding_mod_nlp"], [52, 1, 1, "", "extract_keyword_sentences_window"], [53, 1, 1, "", "extract_passages_from_paragraphs"], [54, 1, 1, "", "get_elections"], [55, 1, 1, "", "get_russia_and_sanction"], [56, 1, 1, "", "get_strategies"], [57, 1, 1, "", "keyword_threshold_search_exclude_mod"], [58, 1, 1, "", "keyword_threshold_search_include_mod"], [59, 1, 1, "", "list_to_string"], [60, 1, 1, "", "process_corpus"], [61, 1, 1, "", "process_text"], [62, 1, 1, "", "process_text_nlp"], [63, 1, 1, "", "remove_sentences_under_threshold"], [64, 1, 1, "", "sample_strategies"], [65, 1, 1, "", "starts_with_additional_word"], [66, 1, 1, "", "strategy_keywords_tolist"]], "infineac.topic_extractor": [[68, 1, 1, "", "bert_advanced"], [69, 1, 1, "", "categorize_topics"], [70, 1, 1, "", "get_groups_from_hierarchy"], [71, 1, 1, "", "get_topics_per_company"], [72, 1, 1, "", "map_topics_to_categories"], [73, 1, 1, "", "plot_category_distribution"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "attribute", "Python attribute"]}, "titleterms": {"infineac": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75], "compare_result": [1, 2, 3, 4, 5, 6, 7], "aggregate_result": 2, "calculate_similar": 3, "create_compare_df": 4, "create_empty_count_df": 5, "get_strategy_list": 6, "update_count": 7, "constant": 8, "file_load": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "add_info_to_ev": 10, "create_blank_ev": 11, "extract_info_from_earnings_call_bodi": 12, "extract_info_from_earnings_call_part": 13, "extract_info_from_earnings_call_structur": 14, "get_participants_posit": 15, "load_files_from_xml": 16, "participants_list_collaps": 17, "participants_string_to_list": 18, "structure_earnings_cal": 19, "transform_unlisted_particip": 20, "helper": [21, 22, 23, 24, 25, 26, 27, 28, 29], "add_context_integ": 22, "fill_list": 23, "fill_list_from_map": 24, "jaccard_similar": 25, "jaccard_similarity_list": 26, "jaccard_similarity_pairwis": 27, "load_data": 28, "save_data": 29, "pipelin": [30, 31], "process_ev": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "check_if_keyword_align_qa": 33, "check_keywords_in_ev": 34, "corpus_list_to_datafram": 35, "create_participants_to_remov": 36, "create_sampl": 37, "events_to_corpu": 38, "excluded_sentences_by_mod_word": 39, "extract_infos_from_ev": 40, "extract_passages_from_ev": [41, 42], "extract_passages_from_present": 43, "extract_passages_from_qa": 44, "filter_ev": 45, "test_posit": 46, "process_text": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "combine_adjacent_sent": 48, "contains_stopword": 49, "extract_keyword_sentences_preceding_mod": 50, "paramet": [50, 51, 52], "extract_keyword_sentences_preceding_mod_nlp": 51, "extract_keyword_sentences_window": 52, "extract_passages_from_paragraph": 53, "get_elect": 54, "get_russia_and_sanct": 55, "get_strategi": 56, "keyword_threshold_search_exclude_mod": 57, "keyword_threshold_search_include_mod": 58, "list_to_str": 59, "process_corpu": 60, "process_text_nlp": 62, "remove_sentences_under_threshold": 63, "sample_strategi": 64, "starts_with_additional_word": 65, "strategy_keywords_tolist": 66, "topic_extractor": [67, 68, 69, 70, 71, 72, 73], "bert_advanc": 68, "categorize_top": 69, "get_groups_from_hierarchi": 70, "get_topics_per_compani": 71, "map_topics_to_categori": 72, "plot_category_distribut": 73, "detail": 74, "descript": 74, "research": 74, "question": 74, "earn": 74, "call": 74, "data": [74, 77], "structur": [74, 77], "document": 75, "packag": 75, "indic": 75, "tabl": 75, "api": 76, "refer": 76, "user": 77, "guid": 77, "overview": 77, "instal": 77, "quickstart": 77, "load": 77, "creat": 77, "corpu": 77, "extract": 77, "topic": 77, "file": 77}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"infineac": [[0, "module-infineac"]], "infineac.compare_results": [[1, "module-infineac.compare_results"]], "infineac.compare_results.aggregate_results": [[2, "infineac-compare-results-aggregate-results"]], "infineac.compare_results.calculate_similarity": [[3, "infineac-compare-results-calculate-similarity"]], "infineac.compare_results.create_compare_df": [[4, "infineac-compare-results-create-compare-df"]], "infineac.compare_results.create_empty_count_df": [[5, "infineac-compare-results-create-empty-count-df"]], "infineac.compare_results.get_strategy_list": [[6, "infineac-compare-results-get-strategy-list"]], "infineac.compare_results.update_count": [[7, "infineac-compare-results-update-count"]], "infineac.constants": [[8, "module-infineac.constants"]], "infineac.file_loader": [[9, "module-infineac.file_loader"]], "infineac.file_loader.add_info_to_event": [[10, "infineac-file-loader-add-info-to-event"]], "infineac.file_loader.create_blank_event": [[11, "infineac-file-loader-create-blank-event"]], "infineac.file_loader.extract_info_from_earnings_call_body": [[12, "infineac-file-loader-extract-info-from-earnings-call-body"]], "infineac.file_loader.extract_info_from_earnings_call_part": [[13, "infineac-file-loader-extract-info-from-earnings-call-part"]], "infineac.file_loader.extract_info_from_earnings_call_structured": [[14, "infineac-file-loader-extract-info-from-earnings-call-structured"]], "infineac.file_loader.get_participants_position": [[15, "infineac-file-loader-get-participants-position"]], "infineac.file_loader.load_files_from_xml": [[16, "infineac-file-loader-load-files-from-xml"]], "infineac.file_loader.participants_list_collapsed": [[17, "infineac-file-loader-participants-list-collapsed"]], "infineac.file_loader.participants_string_to_list": [[18, "infineac-file-loader-participants-string-to-list"]], "infineac.file_loader.structure_earnings_call": [[19, "infineac-file-loader-structure-earnings-call"]], "infineac.file_loader.transform_unlisted_participants": [[20, "infineac-file-loader-transform-unlisted-participants"]], "infineac.helper": [[21, "module-infineac.helper"]], "infineac.helper.add_context_integers": [[22, "infineac-helper-add-context-integers"]], "infineac.helper.fill_list": [[23, "infineac-helper-fill-list"]], "infineac.helper.fill_list_from_mapping": [[24, "infineac-helper-fill-list-from-mapping"]], "infineac.helper.jaccard_similarity": [[25, "infineac-helper-jaccard-similarity"]], "infineac.helper.jaccard_similarity_lists": [[26, "infineac-helper-jaccard-similarity-lists"]], "infineac.helper.jaccard_similarity_pairwise": [[27, "infineac-helper-jaccard-similarity-pairwise"]], "infineac.helper.load_data": [[28, "infineac-helper-load-data"]], "infineac.helper.save_data": [[29, "infineac-helper-save-data"]], "infineac.pipeline": [[30, "module-infineac.pipeline"]], "infineac.pipeline.pipeline": [[31, "infineac-pipeline-pipeline"]], "infineac.process_event": [[32, "module-infineac.process_event"]], "infineac.process_event.check_if_keyword_align_qa": [[33, "infineac-process-event-check-if-keyword-align-qa"]], "infineac.process_event.check_keywords_in_event": [[34, "infineac-process-event-check-keywords-in-event"]], "infineac.process_event.corpus_list_to_dataframe": [[35, "infineac-process-event-corpus-list-to-dataframe"]], "infineac.process_event.create_participants_to_remove": [[36, "infineac-process-event-create-participants-to-remove"]], "infineac.process_event.create_samples": [[37, "infineac-process-event-create-samples"]], "infineac.process_event.events_to_corpus": [[38, "infineac-process-event-events-to-corpus"]], "infineac.process_event.excluded_sentences_by_mod_words": [[39, "infineac-process-event-excluded-sentences-by-mod-words"]], "infineac.process_event.extract_infos_from_events": [[40, "infineac-process-event-extract-infos-from-events"]], "infineac.process_event.extract_passages_from_event": [[41, "infineac-process-event-extract-passages-from-event"]], "infineac.process_event.extract_passages_from_events": [[42, "infineac-process-event-extract-passages-from-events"]], "infineac.process_event.extract_passages_from_presentation": [[43, "infineac-process-event-extract-passages-from-presentation"]], "infineac.process_event.extract_passages_from_qa": [[44, "infineac-process-event-extract-passages-from-qa"]], "infineac.process_event.filter_events": [[45, "infineac-process-event-filter-events"]], "infineac.process_event.test_positions": [[46, "infineac-process-event-test-positions"]], "infineac.process_text": [[47, "module-infineac.process_text"]], "infineac.process_text.combine_adjacent_sentences": [[48, "infineac-process-text-combine-adjacent-sentences"]], "infineac.process_text.contains_stopword": [[49, "infineac-process-text-contains-stopword"]], "infineac.process_text.extract_keyword_sentences_preceding_mod": [[50, "infineac-process-text-extract-keyword-sentences-preceding-mod"]], "Parameter": [[50, "parameter"], [51, "parameter"]], "infineac.process_text.extract_keyword_sentences_preceding_mod_nlp": [[51, "infineac-process-text-extract-keyword-sentences-preceding-mod-nlp"]], "infineac.process_text.extract_keyword_sentences_window": [[52, "infineac-process-text-extract-keyword-sentences-window"]], "Parameter`": [[52, "parameter"]], "infineac.process_text.extract_passages_from_paragraphs": [[53, "infineac-process-text-extract-passages-from-paragraphs"]], "infineac.process_text.get_elections": [[54, "infineac-process-text-get-elections"]], "infineac.process_text.get_russia_and_sanction": [[55, "infineac-process-text-get-russia-and-sanction"]], "infineac.process_text.get_strategies": [[56, "infineac-process-text-get-strategies"]], "infineac.process_text.keyword_threshold_search_exclude_mod": [[57, "infineac-process-text-keyword-threshold-search-exclude-mod"]], "infineac.process_text.keyword_threshold_search_include_mod": [[58, "infineac-process-text-keyword-threshold-search-include-mod"]], "infineac.process_text.list_to_string": [[59, "infineac-process-text-list-to-string"]], "infineac.process_text.process_corpus": [[60, "infineac-process-text-process-corpus"]], "infineac.process_text.process_text": [[61, "infineac-process-text-process-text"]], "infineac.process_text.process_text_nlp": [[62, "infineac-process-text-process-text-nlp"]], "infineac.process_text.remove_sentences_under_threshold": [[63, "infineac-process-text-remove-sentences-under-threshold"]], "infineac.process_text.sample_strategies": [[64, "infineac-process-text-sample-strategies"]], "infineac.process_text.starts_with_additional_word": [[65, "infineac-process-text-starts-with-additional-word"]], "infineac.process_text.strategy_keywords_tolist": [[66, "infineac-process-text-strategy-keywords-tolist"]], "infineac.topic_extractor": [[67, "module-infineac.topic_extractor"]], "infineac.topic_extractor.bert_advanced": [[68, "infineac-topic-extractor-bert-advanced"]], "infineac.topic_extractor.categorize_topics": [[69, "infineac-topic-extractor-categorize-topics"]], "infineac.topic_extractor.get_groups_from_hierarchy": [[70, "infineac-topic-extractor-get-groups-from-hierarchy"]], "infineac.topic_extractor.get_topics_per_company": [[71, "infineac-topic-extractor-get-topics-per-company"]], "infineac.topic_extractor.map_topics_to_categories": [[72, "infineac-topic-extractor-map-topics-to-categories"]], "infineac.topic_extractor.plot_category_distribution": [[73, "infineac-topic-extractor-plot-category-distribution"]], "Detailed Description": [[74, "detailed-description"]], "Research question": [[74, "research-question"]], "Earnings Calls": [[74, "earnings-calls"]], "Data": [[74, "data"]], "Structure": [[74, "structure"]], "InFineac": [[75, "infineac"]], "Documentation": [[75, "documentation"]], "Package": [[75, "package"]], "Indices and tables": [[75, "indices-and-tables"]], "API Reference": [[76, "api-reference"]], "User Guide": [[77, "user-guide"]], "Overview": [[77, "overview"]], "Install": [[77, "install"]], "Quickstart": [[77, "quickstart"]], "Load the data": [[77, "load-the-data"]], "Create Corpus": [[77, "create-corpus"]], "Extract Topics": [[77, "extract-topics"]], "File structure": [[77, "file-structure"]]}, "indexentries": {"infineac": [[0, "module-infineac"]], "module": [[0, "module-infineac"], [1, "module-infineac.compare_results"], [8, "module-infineac.constants"], [9, "module-infineac.file_loader"], [21, "module-infineac.helper"], [30, "module-infineac.pipeline"], [32, "module-infineac.process_event"], [47, "module-infineac.process_text"], [67, "module-infineac.topic_extractor"]], "infineac.compare_results": [[1, "module-infineac.compare_results"]], "aggregate_results() (in module infineac.compare_results)": [[2, "infineac.compare_results.aggregate_results"]], "calculate_similarity() (in module infineac.compare_results)": [[3, "infineac.compare_results.calculate_similarity"]], "create_compare_df() (in module infineac.compare_results)": [[4, "infineac.compare_results.create_compare_df"]], "create_empty_count_df() (in module infineac.compare_results)": [[5, "infineac.compare_results.create_empty_count_df"]], "get_strategy_list() (in module infineac.compare_results)": [[6, "infineac.compare_results.get_strategy_list"]], "update_count() (in module infineac.compare_results)": [[7, "infineac.compare_results.update_count"]], "additional_stopwords (in module infineac.constants)": [[8, "infineac.constants.ADDITIONAL_STOPWORDS"]], "base_year (in module infineac.constants)": [[8, "infineac.constants.BASE_YEAR"]], "modifier_words (in module infineac.constants)": [[8, "infineac.constants.MODIFIER_WORDS"]], "modifier_words_strategy (in module infineac.constants)": [[8, "infineac.constants.MODIFIER_WORDS_STRATEGY"]], "strategy_keywords (in module infineac.constants)": [[8, "infineac.constants.STRATEGY_KEYWORDS"]], "topics (in module infineac.constants)": [[8, "infineac.constants.TOPICS"]], "infineac.constants": [[8, "module-infineac.constants"]], "infineac.file_loader": [[9, "module-infineac.file_loader"]], "add_info_to_event() (in module infineac.file_loader)": [[10, "infineac.file_loader.add_info_to_event"]], "create_blank_event() (in module infineac.file_loader)": [[11, "infineac.file_loader.create_blank_event"]], "extract_info_from_earnings_call_body() (in module infineac.file_loader)": [[12, "infineac.file_loader.extract_info_from_earnings_call_body"]], "extract_info_from_earnings_call_part() (in module infineac.file_loader)": [[13, "infineac.file_loader.extract_info_from_earnings_call_part"]], "extract_info_from_earnings_call_structured() (in module infineac.file_loader)": [[14, "infineac.file_loader.extract_info_from_earnings_call_structured"]], "get_participants_position() (in module infineac.file_loader)": [[15, "infineac.file_loader.get_participants_position"]], "load_files_from_xml() (in module infineac.file_loader)": [[16, "infineac.file_loader.load_files_from_xml"]], "participants_list_collapsed() (in module infineac.file_loader)": [[17, "infineac.file_loader.participants_list_collapsed"]], "participants_string_to_list() (in module infineac.file_loader)": [[18, "infineac.file_loader.participants_string_to_list"]], "structure_earnings_call() (in module infineac.file_loader)": [[19, "infineac.file_loader.structure_earnings_call"]], "transform_unlisted_participants() (in module infineac.file_loader)": [[20, "infineac.file_loader.transform_unlisted_participants"]], "infineac.helper": [[21, "module-infineac.helper"]], "add_context_integers() (in module infineac.helper)": [[22, "infineac.helper.add_context_integers"]], "fill_list() (in module infineac.helper)": [[23, "infineac.helper.fill_list"]], "fill_list_from_mapping() (in module infineac.helper)": [[24, "infineac.helper.fill_list_from_mapping"]], "jaccard_similarity() (in module infineac.helper)": [[25, "infineac.helper.jaccard_similarity"]], "jaccard_similarity_lists() (in module infineac.helper)": [[26, "infineac.helper.jaccard_similarity_lists"]], "jaccard_similarity_pairwise() (in module infineac.helper)": [[27, "infineac.helper.jaccard_similarity_pairwise"]], "load_data() (in module infineac.helper)": [[28, "infineac.helper.load_data"]], "save_data() (in module infineac.helper)": [[29, "infineac.helper.save_data"]], "infineac.pipeline": [[30, "module-infineac.pipeline"]], "pipeline() (in module infineac.pipeline)": [[31, "infineac.pipeline.pipeline"]], "infineac.process_event": [[32, "module-infineac.process_event"]], "check_if_keyword_align_qa() (in module infineac.process_event)": [[33, "infineac.process_event.check_if_keyword_align_qa"]], "check_keywords_in_event() (in module infineac.process_event)": [[34, "infineac.process_event.check_keywords_in_event"]], "corpus_list_to_dataframe() (in module infineac.process_event)": [[35, "infineac.process_event.corpus_list_to_dataframe"]], "create_participants_to_remove() (in module infineac.process_event)": [[36, "infineac.process_event.create_participants_to_remove"]], "create_samples() (in module infineac.process_event)": [[37, "infineac.process_event.create_samples"]], "events_to_corpus() (in module infineac.process_event)": [[38, "infineac.process_event.events_to_corpus"]], "excluded_sentences_by_mod_words() (in module infineac.process_event)": [[39, "infineac.process_event.excluded_sentences_by_mod_words"]], "extract_infos_from_events() (in module infineac.process_event)": [[40, "infineac.process_event.extract_infos_from_events"]], "extract_passages_from_event() (in module infineac.process_event)": [[41, "infineac.process_event.extract_passages_from_event"]], "extract_passages_from_events() (in module infineac.process_event)": [[42, "infineac.process_event.extract_passages_from_events"]], "extract_passages_from_presentation() (in module infineac.process_event)": [[43, "infineac.process_event.extract_passages_from_presentation"]], "extract_passages_from_qa() (in module infineac.process_event)": [[44, "infineac.process_event.extract_passages_from_qa"]], "filter_events() (in module infineac.process_event)": [[45, "infineac.process_event.filter_events"]], "test_positions() (in module infineac.process_event)": [[46, "infineac.process_event.test_positions"]], "infineac.process_text": [[47, "module-infineac.process_text"]], "combine_adjacent_sentences() (in module infineac.process_text)": [[48, "infineac.process_text.combine_adjacent_sentences"]], "contains_stopword() (in module infineac.process_text)": [[49, "infineac.process_text.contains_stopword"]], "extract_keyword_sentences_preceding_mod() (in module infineac.process_text)": [[50, "infineac.process_text.extract_keyword_sentences_preceding_mod"]], "extract_keyword_sentences_preceding_mod_nlp() (in module infineac.process_text)": [[51, "infineac.process_text.extract_keyword_sentences_preceding_mod_nlp"]], "extract_keyword_sentences_window() (in module infineac.process_text)": [[52, "infineac.process_text.extract_keyword_sentences_window"]], "extract_passages_from_paragraphs() (in module infineac.process_text)": [[53, "infineac.process_text.extract_passages_from_paragraphs"]], "get_elections() (in module infineac.process_text)": [[54, "infineac.process_text.get_elections"]], "get_russia_and_sanction() (in module infineac.process_text)": [[55, "infineac.process_text.get_russia_and_sanction"]], "get_strategies() (in module infineac.process_text)": [[56, "infineac.process_text.get_strategies"]], "keyword_threshold_search_exclude_mod() (in module infineac.process_text)": [[57, "infineac.process_text.keyword_threshold_search_exclude_mod"]], "keyword_threshold_search_include_mod() (in module infineac.process_text)": [[58, "infineac.process_text.keyword_threshold_search_include_mod"]], "list_to_string() (in module infineac.process_text)": [[59, "infineac.process_text.list_to_string"]], "process_corpus() (in module infineac.process_text)": [[60, "infineac.process_text.process_corpus"]], "process_text() (in module infineac.process_text)": [[61, "infineac.process_text.process_text"]], "process_text_nlp() (in module infineac.process_text)": [[62, "infineac.process_text.process_text_nlp"]], "remove_sentences_under_threshold() (in module infineac.process_text)": [[63, "infineac.process_text.remove_sentences_under_threshold"]], "sample_strategies() (in module infineac.process_text)": [[64, "infineac.process_text.sample_strategies"]], "starts_with_additional_word() (in module infineac.process_text)": [[65, "infineac.process_text.starts_with_additional_word"]], "strategy_keywords_tolist() (in module infineac.process_text)": [[66, "infineac.process_text.strategy_keywords_tolist"]], "infineac.topic_extractor": [[67, "module-infineac.topic_extractor"]], "bert_advanced() (in module infineac.topic_extractor)": [[68, "infineac.topic_extractor.bert_advanced"]], "categorize_topics() (in module infineac.topic_extractor)": [[69, "infineac.topic_extractor.categorize_topics"]], "get_groups_from_hierarchy() (in module infineac.topic_extractor)": [[70, "infineac.topic_extractor.get_groups_from_hierarchy"]], "get_topics_per_company() (in module infineac.topic_extractor)": [[71, "infineac.topic_extractor.get_topics_per_company"]], "map_topics_to_categories() (in module infineac.topic_extractor)": [[72, "infineac.topic_extractor.map_topics_to_categories"]], "plot_category_distribution() (in module infineac.topic_extractor)": [[73, "infineac.topic_extractor.plot_category_distribution"]]}})